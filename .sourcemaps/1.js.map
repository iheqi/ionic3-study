{"version":3,"sources":["../../src/pages/sqlite-test/sqlite-test.module.ts","../../src/pages/sqlite-test/sqlite-test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACD;AAU/C,IAAa,oBAAoB;IAAjC;IAAmC,CAAC;IAAD,2BAAC;AAAD,CAAC;AAAvB,oBAAoB;IARhC,+DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,oEAAc;SACf;QACD,OAAO,EAAE;YACP,8DAAe,CAAC,QAAQ,CAAC,oEAAc,CAAC;SACzC;KACF,CAAC;GACW,oBAAoB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;ACZS;AACI;AAEc;AAU5D,IAAa,cAAc;IAKzB,wBAAmB,OAAsB,EAAQ,MAAc;QAA5C,YAAO,GAAP,OAAO,CAAe;QAAQ,WAAM,GAAN,MAAM,CAAQ;QAJvD,QAAG,GAAQ,MAAM,CAAC;IAIyC,CAAC;IAEpE,uCAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;QAC7C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAC,CAAC,CAAC;IACvF,CAAC;IACD,MAAM;IACN,iCAAQ,GAAR;QACC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,wCAAwC,EAAE,EAAE,CAAC;IAEjE,CAAC;IACD,MAAM;IACN,6BAAI,GAAJ;QACE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,4BAA4B,EAAC,EAAE,CAAC,CAAC;IACtD,CAAC;IACD,OAAO;IACP,+BAAM,GAAN;QACE,0EAA0E;QAC1E,IAAI,OAAO,GAAU,oCAAoC,CAAC;QAC1D,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAC,EAAE,EAAC;QAE9B,CAAC,CAAC;IACJ,CAAC;IACD,MAAM;IACN,+BAAM,GAAN;QACE,IAAI,IAAI,GAAW,kCAAkC,GAAC,IAAI,CAAC,OAAO,GAAC,GAAG,CAAC;QACvE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,EAAC,EAAE,CAAC;IAE7B,CAAC;IACD,MAAM;IACN,+BAAM,GAAN;QAEE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,kDAAkD,GAAC,IAAI,CAAC,OAAO,GAAC,GAAG,EACnF,EAAE,EAAC,UAAS,EAAE,EAAE,EAAE;YACjB,OAAO,CAAC,GAAG,CAAC,mCAAmC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAC7E,CAAC,EAAE,UAAS,EAAE,EAAE,KAAK;YACnB,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAC,CAAC;QAEF,6BAA6B;QAC7B,gCAAgC;IAClC,CAAC;IAED,8BAAK,GAAL;QACG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,oDAAoD,EAAC,EAAE,EAAC,UAAS,EAAE,EAAE,EAAE;YACzF,OAAO,CAAC,GAAG,CAAC,mCAAmC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAC7E,CAAC,EAAE,UAAS,EAAE,EAAE,KAAK;YACnB,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC;QACM;;;;;;;;QAQA;IACV,CAAC;IA4BH,qBAAC;AAAD,CAAC;AA3FY,cAAc;IAJ1B,gEAAS,CAAC;QACT,QAAQ,EAAE,kBAAkB;OACG;KAChC,CAAC;mBAM+D;AAsFhE;SA3FY,cAAc,gB","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SqliteTestPage } from './sqlite-test';\n\n@NgModule({\n  declarations: [\n    SqliteTestPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SqliteTestPage),\n  ],\n})\nexport class SqliteTestPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/sqlite-test/sqlite-test.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController} from 'ionic-angular';\n\nimport { SQLite, SQLiteObject } from '@ionic-native/sqlite';\nimport { NativeService } from \"../../providers/native-service/native-service\";\n\nimport { MyApp } from '../../app/app.component'\n\n@IonicPage()\n@Component({\n  selector: 'page-sqlite-test',\n  templateUrl: 'sqlite-test.html',\n})\nexport class SqliteTestPage {\n  private win: any = window;\n  db;\n  myInput;\n  a:String\n  constructor(public navCtrl: NavController,public sqlite :SQLite ) {}\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad SqliteTestPage');\n    this.db = this.win.sqlitePlugin.openDatabase({name: 'data.db', location: 'default'});\n  }\n  // 创建表\n  createTb(){\n  \tthis.db.executeSql('create table myTable(name VARCHAR(32))', {})\n          \n  }\n  // 删除表\n  drop(){\n    this.db.executeSql('drop table myTable cascade',{});\n  }\n  // 插入数据\n  insert() {\n    //let input:string = \"insert into myTable values('\"+this.input+\"test01')\";\n    let myInput:string = \"insert into myTable values('test')\";\n    this.db.executeSql(myInput,{},function(){\n      \n    })\n  }\n  //删除数据\n  delete() {\n    let name :string = \"delete from myTable where name='\"+this.myInput+\"'\";\n    this.db.executeSql(name,{})\n    \n  }\n  //查询数据\n  select() {\n\n    this.db.executeSql(\"select name AS mycount from myTable where name='\"+this.myInput+\"'\"\n      ,[],function(tx, rs) {\n        console.log('Record count (expected to be 2): ' + rs.rows.item(0).mycount);\n      }, function(tx, error) {\n        console.log('查询 error: ' + error.message);\n    })\n    \n    //alert(this.db.rows.length);\n    //alert(data.rows.item(0).name);\n  }  \n  \n  query() {\n     this.db.executeSql(\"select name AS mycount from t_log where name='123'\",[],function(tx, rs) {\n      console.log('Record count (expected to be 2): ' + rs.rows.item(0).mycount);\n    }, function(tx, error) {\n      console.log('查询 error: ' + error.message);\n    })\n            /*let output;\n            for (let i = 0; i < data.res.rows.length; i++) {\n                output.push(data.res.rows.item(i));\n            }\n             console.log(\"这是从t_log表查询得出的数据\" + output);\n        })\n        .catch((err) => {\n            console.error(err);\n        })*/\n  }\n\n  /* //建立数据库\n  createSQL(){\n    this.sqlite.create({\n      name: 'myData.db',  \n      location: 'default'\n    }).then(() => (console.log(\"数据库创建成功！\")))\n    .catch(e => console.log(e))\n  }\n  //创建表\n  create(){\n      SqliteTestPage.prototype.db.executeSql('create table myTable(name VARCHAR(10))', {})  //建表\n        .then(() => console.log(\"成功创建学生表！\"))\n        .catch(e => console.log(e));\n  }\n  //删除学生表\n  /*ngOnInit(){\n    this.sqlite.create({\n      name: 'data.db',\n      location: 'default'\n    })\n      .then((db: SQLiteObject) => {\n        console.log(\"成功创建数据库！\")\n        \n      })\n      .catch(e => console.log(e));\n  }*/\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/sqlite-test/sqlite-test.ts"],"sourceRoot":""}